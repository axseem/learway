// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const createDeck = `-- name: CreateDeck :exec
INSERT INTO deck (
  title, cards
) VALUES (
  ?, ?
)
`

type CreateDeckParams struct {
	Title string
	Cards string
}

func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) error {
	_, err := q.db.ExecContext(ctx, createDeck, arg.Title, arg.Cards)
	return err
}

const deleteDeck = `-- name: DeleteDeck :exec
DELETE FROM deck
WHERE id = ?
`

func (q *Queries) DeleteDeck(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDeck, id)
	return err
}

const getDeck = `-- name: GetDeck :one
SELECT id, title, cards, created_at, updated_at FROM deck
WHERE id = ? LIMIT 1
`

func (q *Queries) GetDeck(ctx context.Context, id int64) (Deck, error) {
	row := q.db.QueryRowContext(ctx, getDeck, id)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Cards,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDecks = `-- name: ListDecks :many
SELECT id, title, cards, created_at, updated_at FROM deck
ORDER BY created_at DESC
`

func (q *Queries) ListDecks(ctx context.Context) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, listDecks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cards,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeck = `-- name: UpdateDeck :exec
UPDATE deck
set title = ?, cards = ?
WHERE id = ?
`

type UpdateDeckParams struct {
	Title string
	Cards string
	ID    int64
}

func (q *Queries) UpdateDeck(ctx context.Context, arg UpdateDeckParams) error {
	_, err := q.db.ExecContext(ctx, updateDeck, arg.Title, arg.Cards, arg.ID)
	return err
}
