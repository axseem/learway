// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package database

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO session (id, user_id, fingerprint, ip, expires_at) VALUES (?, ?, ?, ?, ?)
`

type CreateSessionParams struct {
	ID          string
	UserID      string
	Fingerprint []byte
	IP          int64
	ExpiresAt   time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.Fingerprint,
		arg.IP,
		arg.ExpiresAt,
	)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM session
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, fingerprint, ip, expires_at, created_at
FROM session
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetSessionByID(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Fingerprint,
		&i.IP,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionsByUserID = `-- name: GetSessionsByUserID :many
SELECT id, user_id, fingerprint, ip, expires_at, created_at
FROM session
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetSessionsByUserID(ctx context.Context, userID string) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Fingerprint,
			&i.IP,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
UPDATE session
SET fingerprint = ?, ip = ?, expires_at = ?
WHERE id = ?
`

type UpdateSessionParams struct {
	Fingerprint []byte
	IP          int64
	ExpiresAt   time.Time
	ID          string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession,
		arg.Fingerprint,
		arg.IP,
		arg.ExpiresAt,
		arg.ID,
	)
	return err
}
